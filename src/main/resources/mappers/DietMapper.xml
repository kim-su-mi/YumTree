<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.yumTree.diet.DietDao">
	<insert id="insertFood" parameterType="FoodDto">
		INSERT INTO food (food_name, food_kcal, food_carbs, food_protein, food_fat,food_sodium, food_cholesterol, food_weight)
		VALUES
		(#{foodName},#{foodKcal},#{foodCarbs},#{foodProtein},#{foodFat},#{foodSodium},#{foodCholesterol},#{foodWeight})
	</insert>

	<select id="selectFoodList" parameterType="String" resultType="FoodDto">
		select * from food WHERE food_name LIKE CONCAT('%', #{foodName}, '%')
		ORDER BY
		CASE
		    WHEN food_name = #{foodName} THEN 1           <!-- 완전히 일치하는 경우 (우선순위 1) -->
		    WHEN food_name LIKE CONCAT(#{foodName}, '%') THEN 2 <!-- 시작 부분이 일치하는 경우 (우선순위 2) --> 
		    WHEN food_name LIKE CONCAT('%', #{foodName}, '%') THEN 3  <!-- 중간에 포함되는 경우 (우선순위 3) --> 
		    ELSE 4
		END;
	</select>

	<select id="getDailyDietDetails" parameterType="Map" resultType="java.util.Map">
    <!--SELECT 
        dl.meal_type,
        f.food_id,
        f.food_name,
        dld.diet_amount,
        dld.diet_unit,
        f.food_kcal,
        f.food_protein,
        f.food_fat,
        f.food_carbs,
        f.food_weight,
        CASE 
            WHEN dld.diet_unit = 'g' THEN (f.food_kcal * dld.diet_amount / f.food_weight)
            WHEN dld.diet_unit = '인분' THEN (f.food_kcal * dld.diet_amount)
            WHEN dld.diet_unit = '조각' THEN (f.food_kcal * dld.diet_amount / 4)  조각은 1/4인분으로 가정
            WHEN dld.diet_unit = '반찬그릇' THEN (f.food_kcal * dld.diet_amount / 2)  반찬그릇은 1/2인분으로 가정
        END as actual_calories,
        CASE 
            WHEN dld.diet_unit = 'g' THEN (f.food_protein * dld.diet_amount / f.food_weight)
            WHEN dld.diet_unit = '인분' THEN (f.food_protein * dld.diet_amount)
            WHEN dld.diet_unit = '조각' THEN (f.food_protein * dld.diet_amount / 4)
            WHEN dld.diet_unit = '반찬그릇' THEN (f.food_protein * dld.diet_amount / 2)
        END as actual_protein,
        CASE 
            WHEN dld.diet_unit = 'g' THEN (f.food_fat * dld.diet_amount / f.food_weight)
            WHEN dld.diet_unit = '인분' THEN (f.food_fat * dld.diet_amount)
            WHEN dld.diet_unit = '조각' THEN (f.food_fat * dld.diet_amount / 4)
            WHEN dld.diet_unit = '반찬그릇' THEN (f.food_fat * dld.diet_amount / 2)
        END as actual_fat,
        CASE 
            WHEN dld.diet_unit = 'g' THEN (f.food_carbs * dld.diet_amount / f.food_weight)
            WHEN dld.diet_unit = '인분' THEN (f.food_carbs * dld.diet_amount)
            WHEN dld.diet_unit = '조각' THEN (f.food_carbs * dld.diet_amount / 4)
            WHEN dld.diet_unit = '반찬그릇' THEN (f.food_carbs * dld.diet_amount / 2)
        END as actual_carbs
    FROM diet_log dl
    JOIN diet_log_detail dld ON dl.diet_log_id = dld.diet_log_id
    JOIN food f ON dld.food_id = f.food_id
    WHERE dl.user_number = #{userNumber}
    AND dl.diet_log_date = #{date}
    ORDER BY dl.meal_type, f.food_name -->
    SELECT
    dl.meal_type,
    f.food_id,
    f.food_name,
    dld.diet_amount,
    dld.diet_unit,
    f.food_kcal,
    f.food_protein,
    f.food_fat,
    f.food_carbs,
    f.food_sodium,
    f.food_cholesterol,
    f.food_weight,
    -- 실제 섭취량 기준 영양성분 계산
    CASE
        WHEN dld.diet_unit = 'g' THEN (f.food_kcal * dld.diet_amount / f.food_weight)
        WHEN dld.diet_unit = '인분' THEN (f.food_kcal * dld.diet_amount)
        WHEN dld.diet_unit = '조각' THEN (f.food_kcal * dld.diet_amount / 4) -- 조각은 1/4인분으로 가정
        WHEN dld.diet_unit = '반찬그릇' THEN (f.food_kcal * dld.diet_amount / 2) -- 반찬그릇은 1/2인분으로 가정
    END as actual_calories,
    CASE
        WHEN dld.diet_unit = 'g' THEN (f.food_protein * dld.diet_amount / f.food_weight)
        WHEN dld.diet_unit = '인분' THEN (f.food_protein * dld.diet_amount)
        WHEN dld.diet_unit = '조각' THEN (f.food_protein * dld.diet_amount / 4)
        WHEN dld.diet_unit = '반찬그릇' THEN (f.food_protein * dld.diet_amount / 2)
    END as actual_protein,
    CASE
        WHEN dld.diet_unit = 'g' THEN (f.food_fat * dld.diet_amount / f.food_weight)
        WHEN dld.diet_unit = '인분' THEN (f.food_fat * dld.diet_amount)
        WHEN dld.diet_unit = '조각' THEN (f.food_fat * dld.diet_amount / 4)
        WHEN dld.diet_unit = '반찬그릇' THEN (f.food_fat * dld.diet_amount / 2)
    END as actual_fat,
    CASE
        WHEN dld.diet_unit = 'g' THEN (f.food_carbs * dld.diet_amount / f.food_weight)
        WHEN dld.diet_unit = '인분' THEN (f.food_carbs * dld.diet_amount)
        WHEN dld.diet_unit = '조각' THEN (f.food_carbs * dld.diet_amount / 4)
        WHEN dld.diet_unit = '반찬그릇' THEN (f.food_carbs * dld.diet_amount / 2)
    END as actual_carbs,
    CASE
        WHEN dld.diet_unit = 'g' THEN (f.food_sodium * dld.diet_amount / f.food_weight)
        WHEN dld.diet_unit = '인분' THEN (f.food_sodium * dld.diet_amount)
        WHEN dld.diet_unit = '조각' THEN (f.food_sodium * dld.diet_amount / 4)
        WHEN dld.diet_unit = '반찬그릇' THEN (f.food_sodium * dld.diet_amount / 2)
    END as actual_sodium,
    CASE
        WHEN dld.diet_unit = 'g' THEN (f.food_cholesterol * dld.diet_amount / f.food_weight)
        WHEN dld.diet_unit = '인분' THEN (f.food_cholesterol * dld.diet_amount)
        WHEN dld.diet_unit = '조각' THEN (f.food_cholesterol * dld.diet_amount / 4)
        WHEN dld.diet_unit = '반찬그릇' THEN (f.food_cholesterol * dld.diet_amount / 2)
    END as actual_cholesterol
FROM diet_log dl
JOIN diet_log_detail dld ON dl.diet_log_id = dld.diet_log_id
JOIN food f ON dld.food_id = f.food_id
WHERE dl.user_number = #{userNumber}
AND dl.diet_log_date = #{date}
ORDER BY dl.meal_type, f.food_name
</select>

<select id="getFoodDetailByDate" parameterType="Map" resultType="java.util.Map">
    SELECT 
        f.food_id,
        f.food_name,
        dld.diet_amount,
        dld.diet_unit,
        f.food_weight as base_weight,
        <!--실제 섭취량 기준 영양성분 계산-->
        CASE 
            WHEN dld.diet_unit = 'g' THEN (f.food_kcal * dld.diet_amount / f.food_weight)
            WHEN dld.diet_unit = '인분' THEN (f.food_kcal * dld.diet_amount)
            WHEN dld.diet_unit = '조각' THEN (f.food_kcal * dld.diet_amount / 4)
            WHEN dld.diet_unit = '반찬그릇' THEN (f.food_kcal * dld.diet_amount / 2)
        END as actual_calories,
        CASE 
            WHEN dld.diet_unit = 'g' THEN (f.food_protein * dld.diet_amount / f.food_weight)
            WHEN dld.diet_unit = '인분' THEN (f.food_protein * dld.diet_amount)
            WHEN dld.diet_unit = '조각' THEN (f.food_protein * dld.diet_amount / 4)
            WHEN dld.diet_unit = '반찬그릇' THEN (f.food_protein * dld.diet_amount / 2)
        END as actual_protein,
        CASE 
            WHEN dld.diet_unit = 'g' THEN (f.food_fat * dld.diet_amount / f.food_weight)
            WHEN dld.diet_unit = '인분' THEN (f.food_fat * dld.diet_amount)
            WHEN dld.diet_unit = '조각' THEN (f.food_fat * dld.diet_amount / 4)
            WHEN dld.diet_unit = '반찬그릇' THEN (f.food_fat * dld.diet_amount / 2)
        END as actual_fat,
        CASE 
            WHEN dld.diet_unit = 'g' THEN (f.food_carbs * dld.diet_amount / f.food_weight)
            WHEN dld.diet_unit = '인분' THEN (f.food_carbs * dld.diet_amount)
            WHEN dld.diet_unit = '조각' THEN (f.food_carbs * dld.diet_amount / 4)
            WHEN dld.diet_unit = '반찬그릇' THEN (f.food_carbs * dld.diet_amount / 2)
        END as actual_carbs,
        CASE 
            WHEN dld.diet_unit = 'g' THEN (f.food_sodium * dld.diet_amount / f.food_weight)
            WHEN dld.diet_unit = '인분' THEN (f.food_sodium * dld.diet_amount)
            WHEN dld.diet_unit = '조각' THEN (f.food_sodium * dld.diet_amount / 4)
            WHEN dld.diet_unit = '반찬그릇' THEN (f.food_sodium * dld.diet_amount / 2)
        END as actual_sodium,
        CASE 
            WHEN dld.diet_unit = 'g' THEN (f.food_cholesterol * dld.diet_amount / f.food_weight)
            WHEN dld.diet_unit = '인분' THEN (f.food_cholesterol * dld.diet_amount)
            WHEN dld.diet_unit = '조각' THEN (f.food_cholesterol * dld.diet_amount / 4)
            WHEN dld.diet_unit = '반찬그릇' THEN (f.food_cholesterol * dld.diet_amount / 2)
        END as actual_cholesterol
    FROM diet_log dl
    JOIN diet_log_detail dld ON dl.diet_log_id = dld.diet_log_id
    JOIN food f ON dld.food_id = f.food_id
    WHERE dl.user_number = #{userNumber}
    AND dl.diet_log_date = #{date}
    AND f.food_id = #{foodId}
    LIMIT 1
</select>

	<select id="getDietSummaryByMonth" parameterType="Map" resultType="java.util.Map">
	    SELECT
		    DATE_FORMAT(dl.diet_log_date, '%Y-%m-%d') as date,
		    CAST(MAX(CASE WHEN dl.meal_type = '아침' THEN 1 ELSE 0 END) AS SIGNED) as hasBreakfast,
		    CAST(MAX(CASE WHEN dl.meal_type = '점심' THEN 1 ELSE 0 END) AS SIGNED) as hasLunch,
		    CAST(MAX(CASE WHEN dl.meal_type = '저녁' THEN 1 ELSE 0 END) AS SIGNED) as hasDinner,
		    CAST(MAX(CASE WHEN dl.meal_type = '간식' THEN 1 ELSE 0 END) AS SIGNED) as hasSnack
		FROM
		    diet_log dl
		WHERE
		    dl.user_number = #{userNumber}
		    AND dl.diet_log_date BETWEEN #{firstDayOfMonth} AND #{lastDayOfMonth}
		GROUP BY
		    dl.diet_log_date
		ORDER BY
		    dl.diet_log_date
	</select>

	<!-- 음식 이름으로 검색 (완전히 일치해야함) -->
	<select id="findFoodsByName" parameterType="String" resultType="FoodDto">
		SELECT
			food_id,
			food_name,
			food_kcal,
			food_carbs,
			food_protein,
			food_fat,
			food_sodium,
			food_cholesterol,
			food_weight
		FROM food
		WHERE food_name = #{foodName}
		LIMIT 1
	</select>

	<!-- ID로 음식 조회 -->
<!--  <select id="findFoodById" parameterType="int"
		resultType="FoodDto">
		SELECT
			food_id as foodId,
			food_name as foodName,
			food_kcal as foodKcal,
			food_carbs as foodCarbs,
			food_protein as foodProtein,
			food_fat as foodFat,
			food_sodium as foodSodium,
			food_cholesterol as foodCholesterol,
			food_weight as foodWeight
		FROM food
		WHERE food_id = #{foodId}
	</select>
	-->
</mapper>